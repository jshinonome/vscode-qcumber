{
  "name": "quke language",
  "scopeName": "source.quke",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#function"
    },
    {
      "include": "#invalids"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "markup.bold.quke",
          "match": "feature\\s.*"
        },
        {
          "name": "markup.quote.raw.quke",
          "match": "\\s+should\\s.*"
        },
        {
          "name": "markup.inline.raw.quke",
          "match": "\\s+expect\\s.*"
        },
        {
          "name": "comment.block.quke",
          "begin": "^/\\s*$",
          "end": "^\\\\\\s*$"
        },
        {
          "name": "comment.block.eof.quke",
          "begin": "^\\\\\\s*$",
          "end": "\\z"
        },
        {
          "begin": "^(//?)(?:\\s*)(!.*)",
          "end": "(?=^)",
          "beginCaptures": {
            "1": {
              "name": "comment.line.slash.quke"
            },
            "2": {
              "name": "comment.line.attention.quke"
            }
          },
          "contentName": "comment.line.quke"
        },
        {
          "begin": "^(//?)(?:\\s*)(\\?.*)",
          "end": "(?=^)",
          "beginCaptures": {
            "1": {
              "name": "comment.line.slash.quke"
            },
            "2": {
              "name": "comment.line.todo.quke"
            }
          },
          "contentName": "comment.line.quke"
        },
        {
          "begin": "(^(//?)(?:\\s*)(?:(@\\w+)(?:[^.\\w]+([.\\w]+)(?:[^.\\w]+(\\w*))?)?)?)",
          "beginCaptures": {
            "2": {
              "name": "comment.line.slash.quke"
            },
            "3": {
              "name": "storage.type.class.quke"
            },
            "4": {
              "name": "variable.parameter.quke"
            },
            "5": {
              "name": "entity.name.type.quke"
            }
          },
          "end": "(?=^)",
          "contentName": "comment.line.quke"
        },
        {
          "begin": "(\\s//?)(?:\\s*)(!.*)",
          "end": "(?=^)",
          "beginCaptures": {
            "1": {
              "name": "comment.line.slash.quke"
            },
            "2": {
              "name": "comment.line.attention.quke"
            }
          },
          "contentName": "comment.line.quke"
        },
        {
          "begin": "(\\s//?)(?:\\s*)(\\?.*)",
          "end": "(?=^)",
          "beginCaptures": {
            "1": {
              "name": "comment.line.slash.quke"
            },
            "2": {
              "name": "comment.line.todo.quke"
            }
          },
          "contentName": "comment.line.quke"
        },
        {
          "name": "comment.inline.quke",
          "match": "\\s/.*"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.quke"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.quke"
            }
          },
          "name": "string.qukeuoted.double.quke",
          "patterns": [
            {
              "name": "constant.character.escape.quke",
              "match": "\\\\(\\\\|n|t|r|\"|[0-7]{3})"
            },
            {
              "name": "invalid.illegal.newline.quke",
              "match": "^[^\\s]"
            }
          ]
        }
      ]
    },
    "invalids": {
      "patterns": [
        {
          "name": "invalid.illegal.bracket.quke",
          "match": "^[}\\]\\)].*"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "support.function.utility.quke",
          "match": "\\.Q\\.(a|A|addmonths|addr|b6|bt|btoa|bv|Cf|chk|cn|D|dd|def|dpft|dpfts|dsftg|en|ens|f|fc|ff|fk|fmt|fps|fs|fsn|ft|fu|gc|gz|hdpf|hg|host|hp|id|ind|j10|j12|k|l|M|MAP|nA|opt|P|par|pd|PD|pf|pn|pt|pv|PV|qp|qt|res|S|s|s1|sbt|sha1|trp|ts|ty|u|v|V|view|vp|w|x|x10|x12|Xf)\\b"
        },
        {
          "name": "support.function.json.quke",
          "match": "\\.j\\.(j|k|jd)\\b"
        },
        {
          "name": "support.function.callback.quke",
          "match": "\\.z\\.(ac|bm|exit|p[cdghiopqsw]|ts|vs|w[cos])\\b"
        },
        {
          "name": "support.constant.system.info.quke",
          "match": "\\.z\\.([a-fhiklno-qstuwxzDKNPTWXZ]|ex|ey|pm|zd)\\b"
        },
        {
          "name": "support.function.http.quke",
          "match": "\\.h\\.(br|c0|c1|cd|code|d|ed|edsn|fram|ha|hb|hc|he|hn|HOME|hp|hr|ht|hta|htac|htc|html|http|hu|hug|hy|iso8601|jx|logo|nbr|pre|sa|sb|sc|td|text|tx|ty|uh|val|xd|xmp|xs|xt)\\b"
        },
        {
          "name": "support.function.file.quke",
          "match": "\\b(0:|1:|2:)"
        },
        {
          "name": "support.function.internal.quke",
          "match": "\\-([1-9]|1[0-689]|2[0-79]|3[01368]|120)!"
        },
        {
          "name": "constant.language.null.quke",
          "match": "\\b0(N[ghijepmdznuvt]?|n)\\b"
        },
        {
          "name": "constant.language.boolean.quke",
          "match": "\\b[01]+b\\b"
        },
        {
          "name": "constant.language.infinity.quke",
          "match": "-?0(W[hijepdnutv]?|wz?)\\b"
        },
        {
          "name": "constant.other.date",
          "match": "\\b([12]\\d{3}\\.(0[1-9]|1[0-2])\\.(0[1-9]|[12]\\d|3[01]))\\b"
        },
        {
          "name": "constant.other.date.month",
          "match": "\\b([12]\\d{3}\\.(0[1-9]|1[0-2])m)\\b"
        },
        {
          "name": "constant.other.date.time.quke",
          "match": "\\b([01]\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d{0,3})?))?)\\b"
        },
        {
          "name": "constant.other.date.timespan.quke",
          "match": "\\b\\d+D(([01]\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d{0,9})?))?)?)?n?\\b"
        },
        {
          "name": "constant.other.timestamp.quke",
          "match": "\\b([12]\\d{3}\\.(0[1-9]|1[0-2])\\.(0[1-9]|[12]\\d|3[01]))(p|D|Dp|D(([01]\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d{0,9})?))?)?p?))\\b"
        },
        {
          "name": "constant.other.timestamp.datetime.quke",
          "match": "\\b([12]\\d{3}\\.(0[1-9]|1[0-2])\\.(0[1-9]|[12]\\d|3[01]))(z|T|Tz|T(([01]\\d|2[0-3])(:([0-5]\\d)(:([0-5]\\d(\\.\\d{0,3})?))?)?z?))\\b"
        },
        {
          "name": "constant.numeric.byte",
          "match": "\\b0x[0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.guid.quke",
          "match": "\\b([\\da-f]{8}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{4}-[\\da-f]{12})\\b"
        },
        {
          "name": "constant.numeric.decimal.quke",
          "match": "(?x)((?<=[^a-zA-Z0-9]|\\s|^)-)?(?:\n  (?:\\b[0-9]+(\\.)[0-9]*e[+-]?[0-9]+[ef]?)|      # 1.1e+3\n  (?:\\b[0-9]+(\\.)e[+-]?[0-9]+[ef]?)|            # 1.e+3\n  (?:\\B(\\.)[0-9]+e[+-]?[0-9]+[ef]?)|            # .1e+3\n  (?:\\b[0-9]+e[+-]?[0-9]+[ef]?)|                # 1e+3\n  (?:\\b[0-9]+(\\.)[0-9]*[ef]?)|                  # 1.1\n  (?:\\b[0-9]+(\\.)[ef]?)|                        # 1.\n  (?:\\B(\\.)[0-9]+[ef]?)|                        # .1\n  (?:\\b[0-9]+[efhij]?(?!\\.))                    # 1efhij\n)"
        },
        {
          "name": "support.type.quke",
          "match": "`(boolean|byte|short|int|long|real|float|char|symbol|timestamp|month|date|datetime|timespan|minute|second|time|year|mm|dd|hh|uu|ss)(?=\\$)"
        },
        {
          "name": "support.attribute.quke",
          "match": "`[supg](?=#)"
        },
        {
          "name": "constant.other.symbol.quke",
          "match": "`(:[a-zA-Z\\d_\\.:/]*|[a-zA-Z\\d_\\.:]*)"
        },
        {
          "name": "constant.other.cmd.quke",
          "match": "^\\\\.+"
        },
        {
          "name": "constant.other.namespace.quke",
          "match": "^[a-zA-Z]\\)"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.operator.quke",
          "match": "(?<=\\b|_)(abs|acos|all|and|any|asc|asin|asof|atan|attr|avg|avgs|bin|binr|ceiling|cols|cor|cos|count|cov|cross|csv|cut|deltas|desc|dev|differ|distinct|div|dsave|each|ema|enlist|eval|except|exec|exit|exp|fills|first|fkeys|flip|floor|get|getenv|group|gtime|hclose|hcount|hdel|hopen|hsym|iasc|idesc|in|inter|inv|key|keys|last|like|load|log|lower|lsq|ltime|ltrim|mavg|max|maxs|mcount|md5|mdev|med|meta|min|mins|mmax|mmin|mmu|mod|msum|neg|next|not|null|or|over|parse|peach|pj|prd|prds|prev|prior|rand|rank|ratios|raze|read0|read1|reciprocal|reval|reverse|rload|rotate|rsave|rtrim|save|scan|scov|sdev|set|setenv|show|signum|sin|sqrt|ss|ssr|string|sublist|sum|sums|sv|svar|system|tables|tan|til|trim|type|ungroup|union|upper|value|var|view|views|vs|wavg|within|wsum|xasc|xbar|xcol|xcols|xdesc|xexp|xgroup|xkey|xlog|xprev|xrank)\\b"
        },
        {
          "name": "keyword.control.quke",
          "match": "\\b(do|if|while)\\b"
        },
        {
          "name": "keyword.control.quke",
          "match": "\\$(?=\\[)"
        },
        {
          "name": "keyword.assign.quke",
          "match": "::?"
        },
        {
          "name": "keyword.iterator.quke",
          "match": "(':?|\\\\:?|/:?)"
        },
        {
          "name": "keyword.other.DML.quke",
          "match": "\\b(select|update|delete|exec|from|by|fby|where|aj|aj0|ajf|ajf0|ej|ij|ijf|lj|ljf|uj|ujf|wj|wj1|upsert|insert)\\b"
        },
        {
          "name": "keyword.operator.comparison.quke",
          "match": "(=|<=?|>=?|~|<>)"
        },
        {
          "include": "#variables"
        },
        {
          "name": "keyword.operator.quke",
          "match": "[\\@\\.\\$!?+\\-\\*%|&#^,_]"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "name": "entity.name.function.quke",
          "match": "(?<![a-zA-Z\\d])\\.[a-zA-Z][a-zA-Z\\d_]*(\\.[a-zA-Z\\d_]+)*"
        },
        {
          "name": "variable.other.quke",
          "match": "[a-zA-Z][a-zA-Z\\d_]*"
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "begin": "{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.function.body.begin.quke"
            }
          },
          "end": "}",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.function.body.end.quke"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#invalids"
            },
            {
              "include": "#function"
            }
          ]
        }
      ]
    }
  }
}
